#!/usr/bin/sbcl --script
;; -*- Lisp -*-

(defconstant N 100)

(defvar *map*
  (make-array (list N N) :initial-element nil))

;;; Lee tu posicion inicial
(defvar *x* (read))
(defvar *y* (read))

;;; Lee la posicion inicial de tu enemigo
(defvar *cx* (read))
(defvar *cy* (read))

(defun validp (x y)
  (and (<= 0 x (1- N))
       (<= 0 y (1- N))
       (not (aref *map* x y))))

;;; Estrategia: moverse en la direccion del enemigo, cuidando de no
;;; chocarse si es posible.

(defun scramble (list)
  (loop for tail on list
        do (rotatef (car tail)
                    (nth (random (length tail)) tail)))
  list)

(defun distance-from-enemy (x y)
  (+ (abs (- x *cx*))
     (abs (- y *cy*))))

(defun movement-value-1 (di dj)
  (distance-from-enemy
   (+ *x* dj)
   (+ *y* di)))

(defun movement-value (pos)
  (apply #'movement-value-1 pos))

(defun list-of-movements ()
  (let ((movs (list '(1 0) '(0 1) '(-1 0) '(0 -1))))
    (sort (scramble movs) #'> :key #'movement-value)))

(defun move ()
  (loop for (di dj) in (list-of-movements)
        until (validp (+ *x* dj) (+ *y* di))
        finally
           (progn
             (incf *x* dj)
             (incf *y* di)))
  (setf (aref *map* *x* *y*) t))

(loop
  (move)
  (format t "~a ~a~%" *x* *y*)
  (setf *cx* (read))
  (setf *cy* (read))
  (setf (aref *map* *cx* *cy*) t))
